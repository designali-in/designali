{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tasks-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "A simple dashboard",
  "registryDependencies": [],
  "files": [
    {
      "path": "blocks/tasks-01/page.tsx",
      "content": "import { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\n\nimport { columns } from \"./components/columns\";\nimport { DataTable } from \"./components/data-table\";\nimport { UserNav } from \"./components/user-nav\";\nimport { taskSchema } from \"./data/schema\";\n\n// Simulate a database read for tasks.\nasync function getTasks() {\n  const data = await fs.readFile(\n    path.join(\n      process.cwd(),\n      \"registry/default/blocks/tasks-01/data/tasks.json\",\n    ),\n  );\n\n  const tasks = JSON.parse(data.toString());\n\n  return z.array(taskSchema).parse(tasks);\n}\n\nexport default async function TaskPage() {\n  const tasks = await getTasks();\n\n  return (\n    <>\n      <div className=\"hidden h-full flex-1 flex-col space-y-8 p-8 md:flex\">\n        <div className=\"flex items-center justify-between space-y-2\">\n          <div>\n            <h2 className=\"text-2xl font-bold tracking-tight\">Welcome back!</h2>\n            <p className=\"text-muted-foreground\">\n              Here&apos;s a list of your tasks for this month!\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <UserNav />\n          </div>\n        </div>\n        <DataTable data={tasks} columns={columns} />\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/tasks/page.tsx"
    },
    {
      "path": "blocks/tasks-01/components/columns.tsx",
      "content": "\"use client\";\n\nimport { ColumnDef } from \"@tanstack/react-table\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nimport { labels, priorities, statuses } from \"../data/data\";\nimport { Task } from \"../data/schema\";\nimport { DataTableColumnHeader } from \"./data-table-column-header\";\nimport { DataTableRowActions } from \"./data-table-row-actions\";\n\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Task\" />\n    ),\n    cell: ({ row }) => <div className=\"w-[80px]\">{row.getValue(\"id\")}</div>,\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Title\" />\n    ),\n    cell: ({ row }) => {\n      const label = labels.find((label) => label.value === row.original.label);\n\n      return (\n        <div className=\"flex space-x-2\">\n          {label && <Badge variant=\"outline\">{label.label}</Badge>}\n          <span className=\"max-w-[500px] truncate font-medium\">\n            {row.getValue(\"title\")}\n          </span>\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Status\" />\n    ),\n    cell: ({ row }) => {\n      const status = statuses.find(\n        (status) => status.value === row.getValue(\"status\"),\n      );\n\n      if (!status) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex w-[100px] items-center\">\n          {status.icon && (\n            <status.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          )}\n          <span>{status.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    accessorKey: \"priority\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Priority\" />\n    ),\n    cell: ({ row }) => {\n      const priority = priorities.find(\n        (priority) => priority.value === row.getValue(\"priority\"),\n      );\n\n      if (!priority) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex items-center\">\n          {priority.icon && (\n            <priority.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n          )}\n          <span>{priority.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => <DataTableRowActions row={row} />,\n  },\n];\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\";\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ChevronsUpDown />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUp className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDown className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeOff className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-faceted-filter.tsx",
      "content": "import * as React from \"react\";\nimport { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge\n                variant=\"secondary\"\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\n              >\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden space-x-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"rounded-sm px-1 font-normal\"\n                  >\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(\n                        filterValues.length ? filterValues : undefined,\n                      );\n                    }}\n                  >\n                    <div\n                      className={cn(\n                        \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                        isSelected\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"opacity-50 [&_svg]:invisible\",\n                      )}\n                    >\n                      <Check />\n                    </div>\n                    {option.icon && (\n                      <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    )}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\"\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-row-actions.tsx",
      "content": "\"use client\";\n\nimport { Row } from \"@tanstack/react-table\";\nimport { MoreHorizontal } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nimport { labels } from \"../data/data\";\nimport { taskSchema } from \"../data/schema\";\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n}\n\nexport function DataTableRowActions<TData>({\n  row,\n}: DataTableRowActionsProps<TData>) {\n  const task = taskSchema.parse(row.original);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\"\n        >\n          <MoreHorizontal />\n          <span className=\"sr-only\">Open menu</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n        <DropdownMenuItem>Edit</DropdownMenuItem>\n        <DropdownMenuItem>Make a copy</DropdownMenuItem>\n        <DropdownMenuItem>Favorite</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Labels</DropdownMenuSubTrigger>\n          <DropdownMenuSubContent>\n            <DropdownMenuRadioGroup value={task.label}>\n              {labels.map((label) => (\n                <DropdownMenuRadioItem key={label.value} value={label.value}>\n                  {label.label}\n                </DropdownMenuRadioItem>\n              ))}\n            </DropdownMenuRadioGroup>\n          </DropdownMenuSubContent>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Delete\n          <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-toolbar.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { X } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTableViewOptions } from \"./data-table-view-options\";\n\nimport { priorities, statuses } from \"../data/data\";\nimport { DataTableFacetedFilter } from \"./data-table-faceted-filter\";\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableToolbar<TData>({\n  table,\n}: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center space-x-2\">\n        <Input\n          placeholder=\"Filter tasks...\"\n          value={(table.getColumn(\"title\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"title\")?.setFilterValue(event.target.value)\n          }\n          className=\"h-8 w-[150px] lg:w-[250px]\"\n        />\n        {table.getColumn(\"status\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"status\")}\n            title=\"Status\"\n            options={statuses}\n          />\n        )}\n        {table.getColumn(\"priority\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"priority\")}\n            title=\"Priority\"\n            options={priorities}\n          />\n        )}\n        {isFiltered && (\n          <Button\n            variant=\"ghost\"\n            onClick={() => table.resetColumnFilters()}\n            className=\"h-8 px-2 lg:px-3\"\n          >\n            Reset\n            <X />\n          </Button>\n        )}\n      </div>\n      <DataTableViewOptions table={table} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table-view-options.tsx",
      "content": "\"use client\";\n\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\nimport { Table } from \"@tanstack/react-table\";\nimport { Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <Settings2 />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide(),\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/data-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nimport { DataTablePagination } from \"./data-table-pagination\";\nimport { DataTableToolbar } from \"./data-table-toolbar\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    [],\n  );\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <DataTableToolbar table={table} />\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext(),\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/components/user-nav.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function UserNav() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage src=\"/avatars/03.png\" alt=\"@shadcn\" />\n            <AvatarFallback>SC</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">shadcn</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">\n              m@example.com\n            </p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            Profile\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Billing\n            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Settings\n            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>New Team</DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/data/data.tsx",
      "content": "import {\n  ArrowDown,\n  ArrowRight,\n  ArrowUp,\n  CheckCircle,\n  Circle,\n  CircleOff,\n  HelpCircle,\n  Timer,\n} from \"lucide-react\";\n\nexport const labels = [\n  {\n    value: \"bug\",\n    label: \"Bug\",\n  },\n  {\n    value: \"feature\",\n    label: \"Feature\",\n  },\n  {\n    value: \"documentation\",\n    label: \"Documentation\",\n  },\n];\n\nexport const statuses = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    icon: HelpCircle,\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    icon: Circle,\n  },\n  {\n    value: \"in progress\",\n    label: \"In Progress\",\n    icon: Timer,\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    icon: CheckCircle,\n  },\n  {\n    value: \"canceled\",\n    label: \"Canceled\",\n    icon: CircleOff,\n  },\n];\n\nexport const priorities = [\n  {\n    label: \"Low\",\n    value: \"low\",\n    icon: ArrowDown,\n  },\n  {\n    label: \"Medium\",\n    value: \"medium\",\n    icon: ArrowRight,\n  },\n  {\n    label: \"High\",\n    value: \"high\",\n    icon: ArrowUp,\n  },\n];\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/data/schema.ts",
      "content": "import { z } from \"zod\";\n\n// We're keeping a simple non-relational schema here.\n// IRL, you will have a schema for your data models.\nexport const taskSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  status: z.string(),\n  label: z.string(),\n  priority: z.string(),\n});\n\nexport type Task = z.infer<typeof taskSchema>;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/data/tasks.json",
      "content": "[\n    {\n      \"id\": \"TASK-8782\",\n      \"title\": \"You can't compress the program without quantifying the open-source SSD pixel!\",\n      \"status\": \"in progress\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-7878\",\n      \"title\": \"Try to calculate the EXE feed, maybe it will index the multi-byte pixel!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-7839\",\n      \"title\": \"We need to bypass the neural TCP card!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-5562\",\n      \"title\": \"The SAS interface is down, bypass the open-source pixel so we can back up the PNG bandwidth!\",\n      \"status\": \"backlog\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-8686\",\n      \"title\": \"I'll parse the wireless SSL protocol, that should driver the API panel!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-1280\",\n      \"title\": \"Use the digital TLS panel, then you can transmit the haptic system!\",\n      \"status\": \"done\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-7262\",\n      \"title\": \"The UTF8 application is down, parse the neural bandwidth so we can back up the PNG firewall!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1138\",\n      \"title\": \"Generating the driver won't do anything, we need to quantify the 1080p SMTP bandwidth!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-7184\",\n      \"title\": \"We need to program the back-end THX pixel!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-5160\",\n      \"title\": \"Calculating the bus won't do anything, we need to navigate the back-end JSON protocol!\",\n      \"status\": \"in progress\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-5618\",\n      \"title\": \"Generating the driver won't do anything, we need to index the online SSL application!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-6699\",\n      \"title\": \"I'll transmit the wireless JBOD capacitor, that should hard drive the SSD feed!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-2858\",\n      \"title\": \"We need to override the online UDP bus!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9864\",\n      \"title\": \"I'll reboot the 1080p FTP panel, that should matrix the HEX hard drive!\",\n      \"status\": \"done\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-8404\",\n      \"title\": \"We need to generate the virtual HEX alarm!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-5365\",\n      \"title\": \"Backing up the pixel won't do anything, we need to transmit the primary IB array!\",\n      \"status\": \"in progress\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-1780\",\n      \"title\": \"The CSS feed is down, index the bluetooth transmitter so we can compress the CLI protocol!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-6938\",\n      \"title\": \"Use the redundant SCSI application, then you can hack the optical alarm!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-9885\",\n      \"title\": \"We need to compress the auxiliary VGA driver!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-3216\",\n      \"title\": \"Transmitting the transmitter won't do anything, we need to compress the virtual HDD sensor!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9285\",\n      \"title\": \"The IP monitor is down, copy the haptic alarm so we can generate the HTTP transmitter!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1024\",\n      \"title\": \"Overriding the microchip won't do anything, we need to transmit the digital OCR transmitter!\",\n      \"status\": \"in progress\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7068\",\n      \"title\": \"You can't generate the capacitor without indexing the wireless HEX pixel!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6502\",\n      \"title\": \"Navigating the microchip won't do anything, we need to bypass the back-end SQL bus!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-5326\",\n      \"title\": \"We need to hack the redundant UTF8 transmitter!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6274\",\n      \"title\": \"Use the virtual PCI circuit, then you can parse the bluetooth alarm!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-1571\",\n      \"title\": \"I'll input the neural DRAM circuit, that should protocol the SMTP interface!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9518\",\n      \"title\": \"Compressing the interface won't do anything, we need to compress the online SDD matrix!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-5581\",\n      \"title\": \"I'll synthesize the digital COM pixel, that should transmitter the UTF8 protocol!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-2197\",\n      \"title\": \"Parsing the feed won't do anything, we need to copy the bluetooth DRAM bus!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-8484\",\n      \"title\": \"We need to parse the solid state UDP firewall!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-9892\",\n      \"title\": \"If we back up the application, we can get to the UDP application through the multi-byte THX capacitor!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-9616\",\n      \"title\": \"We need to synthesize the cross-platform ASCII pixel!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9744\",\n      \"title\": \"Use the back-end IP card, then you can input the solid state hard drive!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-1376\",\n      \"title\": \"Generating the alarm won't do anything, we need to generate the mobile IP capacitor!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7382\",\n      \"title\": \"If we back up the firewall, we can get to the RAM alarm through the primary UTF8 pixel!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-2290\",\n      \"title\": \"I'll compress the virtual JSON panel, that should application the UTF8 bus!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1533\",\n      \"title\": \"You can't input the firewall without overriding the wireless TCP firewall!\",\n      \"status\": \"done\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-4920\",\n      \"title\": \"Bypassing the hard drive won't do anything, we need to input the bluetooth JSON program!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-5168\",\n      \"title\": \"If we synthesize the bus, we can get to the IP panel through the virtual TLS array!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7103\",\n      \"title\": \"We need to parse the multi-byte EXE bandwidth!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-4314\",\n      \"title\": \"If we compress the program, we can get to the XML alarm through the multi-byte COM matrix!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-3415\",\n      \"title\": \"Use the cross-platform XML application, then you can quantify the solid state feed!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-8339\",\n      \"title\": \"Try to calculate the DNS interface, maybe it will input the bluetooth capacitor!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6995\",\n      \"title\": \"Try to hack the XSS bandwidth, maybe it will override the bluetooth matrix!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-8053\",\n      \"title\": \"If we connect the program, we can get to the UTF8 matrix through the digital UDP protocol!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-4336\",\n      \"title\": \"If we synthesize the microchip, we can get to the SAS sensor through the optical UDP program!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-8790\",\n      \"title\": \"I'll back up the optical COM alarm, that should alarm the RSS capacitor!\",\n      \"status\": \"done\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-8980\",\n      \"title\": \"Try to navigate the SQL transmitter, maybe it will back up the virtual firewall!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7342\",\n      \"title\": \"Use the neural CLI card, then you can parse the online port!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-5608\",\n      \"title\": \"I'll hack the haptic SSL program, that should bus the UDP transmitter!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-1606\",\n      \"title\": \"I'll generate the bluetooth PNG firewall, that should pixel the SSL driver!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-7872\",\n      \"title\": \"Transmitting the circuit won't do anything, we need to reboot the 1080p RSS monitor!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-4167\",\n      \"title\": \"Use the cross-platform SMS circuit, then you can synthesize the optical feed!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9581\",\n      \"title\": \"You can't index the port without hacking the cross-platform XSS monitor!\",\n      \"status\": \"backlog\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-8806\",\n      \"title\": \"We need to bypass the back-end SSL panel!\",\n      \"status\": \"done\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-6542\",\n      \"title\": \"Try to quantify the RSS firewall, maybe it will quantify the open-source system!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6806\",\n      \"title\": \"The VGA protocol is down, reboot the back-end matrix so we can parse the CSS panel!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-9549\",\n      \"title\": \"You can't bypass the bus without connecting the neural JBOD bus!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1075\",\n      \"title\": \"Backing up the driver won't do anything, we need to parse the redundant RAM pixel!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-1427\",\n      \"title\": \"Use the auxiliary PCI circuit, then you can calculate the cross-platform interface!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1907\",\n      \"title\": \"Hacking the circuit won't do anything, we need to back up the online DRAM system!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-4309\",\n      \"title\": \"If we generate the system, we can get to the TCP sensor through the optical GB pixel!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3973\",\n      \"title\": \"I'll parse the back-end ADP array, that should bandwidth the RSS bandwidth!\",\n      \"status\": \"todo\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-7962\",\n      \"title\": \"Use the wireless RAM program, then you can hack the cross-platform feed!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-3360\",\n      \"title\": \"You can't quantify the program without synthesizing the neural OCR interface!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-9887\",\n      \"title\": \"Use the auxiliary ASCII sensor, then you can connect the solid state port!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3649\",\n      \"title\": \"I'll input the virtual USB system, that should circuit the DNS monitor!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3586\",\n      \"title\": \"If we quantify the circuit, we can get to the CLI feed through the mobile SMS hard drive!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-5150\",\n      \"title\": \"I'll hack the wireless XSS port, that should transmitter the IP interface!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3652\",\n      \"title\": \"The SQL interface is down, override the optical bus so we can program the ASCII interface!\",\n      \"status\": \"backlog\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6884\",\n      \"title\": \"Use the digital PCI circuit, then you can synthesize the multi-byte microchip!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1591\",\n      \"title\": \"We need to connect the mobile XSS driver!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-3802\",\n      \"title\": \"Try to override the ASCII protocol, maybe it will parse the virtual matrix!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7253\",\n      \"title\": \"Programming the capacitor won't do anything, we need to bypass the neural IB hard drive!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-9739\",\n      \"title\": \"We need to hack the multi-byte HDD bus!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-4424\",\n      \"title\": \"Try to hack the HEX alarm, maybe it will connect the optical pixel!\",\n      \"status\": \"in progress\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3922\",\n      \"title\": \"You can't back up the capacitor without generating the wireless PCI program!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-4921\",\n      \"title\": \"I'll index the open-source IP feed, that should system the GB application!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-5814\",\n      \"title\": \"We need to calculate the 1080p AGP feed!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-2645\",\n      \"title\": \"Synthesizing the system won't do anything, we need to navigate the multi-byte HDD firewall!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-4535\",\n      \"title\": \"Try to copy the JSON circuit, maybe it will connect the wireless feed!\",\n      \"status\": \"in progress\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-4463\",\n      \"title\": \"We need to copy the solid state AGP monitor!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-9745\",\n      \"title\": \"If we connect the protocol, we can get to the GB system through the bluetooth PCI microchip!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-2080\",\n      \"title\": \"If we input the bus, we can get to the RAM matrix through the auxiliary RAM card!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3838\",\n      \"title\": \"I'll bypass the online TCP application, that should panel the AGP system!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-1340\",\n      \"title\": \"We need to navigate the virtual PNG circuit!\",\n      \"status\": \"todo\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-6665\",\n      \"title\": \"If we parse the monitor, we can get to the SSD hard drive through the cross-platform AGP alarm!\",\n      \"status\": \"canceled\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-7585\",\n      \"title\": \"If we calculate the hard drive, we can get to the SSL program through the multi-byte CSS microchip!\",\n      \"status\": \"backlog\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-6319\",\n      \"title\": \"We need to copy the multi-byte SCSI program!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-4369\",\n      \"title\": \"Try to input the SCSI bus, maybe it will generate the 1080p pixel!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-9035\",\n      \"title\": \"We need to override the solid state PNG array!\",\n      \"status\": \"canceled\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-3970\",\n      \"title\": \"You can't index the transmitter without quantifying the haptic ASCII card!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-4473\",\n      \"title\": \"You can't bypass the protocol without overriding the neural RSS program!\",\n      \"status\": \"todo\",\n      \"label\": \"documentation\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-4136\",\n      \"title\": \"You can't hack the hard drive without hacking the primary JSON program!\",\n      \"status\": \"canceled\",\n      \"label\": \"bug\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-3939\",\n      \"title\": \"Use the back-end SQL firewall, then you can connect the neural hard drive!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"low\"\n    },\n    {\n      \"id\": \"TASK-2007\",\n      \"title\": \"I'll input the back-end USB protocol, that should bandwidth the PCI system!\",\n      \"status\": \"backlog\",\n      \"label\": \"bug\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-7516\",\n      \"title\": \"Use the primary SQL program, then you can generate the auxiliary transmitter!\",\n      \"status\": \"done\",\n      \"label\": \"documentation\",\n      \"priority\": \"medium\"\n    },\n    {\n      \"id\": \"TASK-6906\",\n      \"title\": \"Try to back up the DRAM system, maybe it will reboot the online transmitter!\",\n      \"status\": \"done\",\n      \"label\": \"feature\",\n      \"priority\": \"high\"\n    },\n    {\n      \"id\": \"TASK-5207\",\n      \"title\": \"The SMS interface is down, copy the bluetooth bus so we can quantify the VGA card!\",\n      \"status\": \"in progress\",\n      \"label\": \"bug\",\n      \"priority\": \"low\"\n    }\n  ]",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tasks-01/data/seed.ts",
      "content": "import fs from \"fs\";\nimport path from \"path\";\nimport { faker } from \"@faker-js/faker\";\n\nimport { labels, priorities, statuses } from \"./data\";\n\nconst tasks = Array.from({ length: 100 }, () => ({\n  id: `TASK-${faker.number.int({ min: 1000, max: 9999 })}`,\n  title: faker.hacker.phrase().replace(/^./, (letter) => letter.toUpperCase()),\n  status: faker.helpers.arrayElement(statuses).value,\n  label: faker.helpers.arrayElement(labels).value,\n  priority: faker.helpers.arrayElement(priorities).value,\n}));\n\nfs.writeFileSync(\n  path.join(__dirname, \"tasks.json\"),\n  JSON.stringify(tasks, null, 2),\n);\n\nconsole.log(\"✅ Tasks data generated.\");\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "dashboard"
  ]
}