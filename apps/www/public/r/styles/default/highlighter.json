{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "highlighter",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/backgrounds/highlighter.tsx",
      "content": "\"use client\";\n\nimport type { PropsWithChildren } from \"react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport MousePosition from \"@/utils/mouse\";\n\ninterface HighlightGroupProps {\n  children: React.ReactNode;\n  className?: string;\n  refresh?: boolean;\n}\n\nexport const HighlightGroup: React.FC<HighlightGroupProps> = ({\n  children,\n  className = \"\",\n  refresh = false,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mousePosition = MousePosition();\n  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });\n  const [boxes, setBoxes] = useState<HTMLElement[]>([]);\n\n  useEffect(() => {\n    containerRef.current &&\n      setBoxes(\n        Array.from(containerRef.current.children).map((el) => el as HTMLElement)\n      );\n  }, []);\n\n  useEffect(() => {\n    initContainer();\n    window.addEventListener(\"resize\", initContainer);\n\n    return () => {\n      window.removeEventListener(\"resize\", initContainer);\n    };\n  }, [setBoxes]);\n\n  useEffect(() => {\n    onMouseMove();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mousePosition]);\n\n  useEffect(() => {\n    initContainer();\n  }, [refresh]);\n\n  const initContainer = () => {\n    if (containerRef.current) {\n      containerSize.current.w = containerRef.current.offsetWidth;\n      containerSize.current.h = containerRef.current.offsetHeight;\n    }\n  };\n\n  const onMouseMove = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      const { w, h } = containerSize.current;\n      const x = mousePosition.x - rect.left;\n      const y = mousePosition.y - rect.top;\n      const inside = x < w && x > 0 && y < h && y > 0;\n      if (inside) {\n        mouse.current.x = x;\n        mouse.current.y = y;\n        boxes.forEach((box) => {\n          const boxX =\n            -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;\n          const boxY =\n            -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;\n          box.style.setProperty(\"--mouse-x\", `${boxX}px`);\n          box.style.setProperty(\"--mouse-y\", `${boxY}px`);\n        });\n      }\n    }\n  };\n\n  return (\n    <div className={className} ref={containerRef}>\n      {children}\n    </div>\n  );\n};\n\ninterface HighlighterItemProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const HighlighterItem: React.FC<\n  PropsWithChildren<HighlighterItemProps>\n> = ({ children, className = \"\" }) => {\n  return (\n    <div\n      className={`relative overflow-hidden p-px before:pointer-events-none before:absolute before:-left-48 before:-top-48 before:z-30 before:h-96 before:w-96 before:translate-x-[var(--mouse-x)] before:translate-y-[var(--mouse-y)] before:rounded-full before:bg-lime-500 before:opacity-0 before:blur-[100px] before:transition-opacity before:duration-500 after:absolute after:inset-0 after:z-10 after:rounded-3xl after:opacity-0 after:transition-opacity after:duration-500  before:hover:opacity-20 after:group-hover:opacity-100 dark:before:bg-white/50  ${className}`}\n    >\n      {children}\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}