{
  "name": "stroke-dance",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/backgrounds/stroke-dance.js",
      "content": "function n(e) {\n  // @ts-ignore\n  this.init(e || {});\n}\nn.prototype = {\n  // @ts-ignore\n  init: function (e) {\n    // @ts-ignore\n    this.phase = e.phase || 0;\n    // @ts-ignore\n    this.offset = e.offset || 0;\n    // @ts-ignore\n    this.frequency = e.frequency || 0.001;\n    // @ts-ignore\n    this.amplitude = e.amplitude || 1;\n  },\n  update: function () {\n    return (\n      // @ts-ignore\n      (this.phase += this.frequency),\n      // @ts-ignore\n      (e = this.offset + Math.sin(this.phase) * this.amplitude)\n    );\n  },\n  value: function () {\n    return e;\n  },\n};\n\n// @ts-ignore\nfunction Line(e) {\n  // @ts-ignore\n  this.init(e || {});\n}\n\nLine.prototype = {\n  // @ts-ignore\n  init: function (e) {\n    // @ts-ignore\n    this.spring = e.spring + 0.1 * Math.random() - 0.05;\n    // @ts-ignore\n    this.friction = E.friction + 0.01 * Math.random() - 0.005;\n    // @ts-ignore\n    this.nodes = [];\n    for (var t, n = 0; n < E.size; n++) {\n      t = new Node();\n      // @ts-ignore\n      t.x = pos.x;\n      // @ts-ignore\n      t.y = pos.y;\n      // @ts-ignore\n      this.nodes.push(t);\n    }\n  },\n  update: function () {\n    // @ts-ignore\n    let e = this.spring,\n      // @ts-ignore\n      t = this.nodes[0];\n    // @ts-ignore\n    t.vx += (pos.x - t.x) * e;\n    // @ts-ignore\n    t.vy += (pos.y - t.y) * e;\n    // @ts-ignore\n    for (var n, i = 0, a = this.nodes.length; i < a; i++)\n      // @ts-ignore\n      (t = this.nodes[i]),\n        0 < i &&\n          // @ts-ignore\n          ((n = this.nodes[i - 1]),\n          (t.vx += (n.x - t.x) * e),\n          (t.vy += (n.y - t.y) * e),\n          (t.vx += n.vx * E.dampening),\n          (t.vy += n.vy * E.dampening)),\n        // @ts-ignore\n        (t.vx *= this.friction),\n        // @ts-ignore\n        (t.vy *= this.friction),\n        (t.x += t.vx),\n        (t.y += t.vy),\n        (e *= E.tension);\n  },\n  draw: function () {\n    let e,\n      t,\n      // @ts-ignore\n      n = this.nodes[0].x,\n      // @ts-ignore\n      i = this.nodes[0].y;\n    // @ts-ignore\n    ctx.beginPath();\n    // @ts-ignore\n    ctx.moveTo(n, i);\n    // @ts-ignore\n    for (var a = 1, o = this.nodes.length - 2; a < o; a++) {\n      // @ts-ignore\n      e = this.nodes[a];\n      // @ts-ignore\n      t = this.nodes[a + 1];\n      n = 0.5 * (e.x + t.x);\n      i = 0.5 * (e.y + t.y);\n      // @ts-ignore\n      ctx.quadraticCurveTo(e.x, e.y, n, i);\n    }\n    // @ts-ignore\n    e = this.nodes[a];\n    // @ts-ignore\n    t = this.nodes[a + 1];\n    // @ts-ignore\n    ctx.quadraticCurveTo(e.x, e.y, t.x, t.y);\n    // @ts-ignore\n    ctx.stroke();\n    // @ts-ignore\n    ctx.closePath();\n  },\n};\n\n// @ts-ignore\nfunction onMousemove(e) {\n  function o() {\n    lines = [];\n    for (let e = 0; e < E.trails; e++)\n      lines.push(new Line({ spring: 0.45 + (e / E.trails) * 0.025 }));\n  }\n  // @ts-ignore\n  function c(e) {\n    e.touches\n      ? // @ts-ignore\n        ((pos.x = e.touches[0].pageX), (pos.y = e.touches[0].pageY))\n      : // @ts-ignore\n        ((pos.x = e.clientX), (pos.y = e.clientY)),\n      e.preventDefault();\n  }\n  // @ts-ignore\n  function l(e) {\n    // @ts-ignore\n    1 == e.touches.length &&\n      ((pos.x = e.touches[0].pageX), (pos.y = e.touches[0].pageY));\n  }\n  document.removeEventListener(\"mousemove\", onMousemove),\n    document.removeEventListener(\"touchstart\", onMousemove),\n    document.addEventListener(\"mousemove\", c),\n    document.addEventListener(\"touchmove\", c),\n    document.addEventListener(\"touchstart\", l),\n    c(e),\n    o(),\n    render();\n}\n\nfunction render() {\n  // @ts-ignore\n  if (ctx.running) {\n    // @ts-ignore\n    ctx.globalCompositeOperation = \"source-over\";\n    // @ts-ignore\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // @ts-ignore\n    ctx.globalCompositeOperation = \"lighter\";\n    // @ts-ignore\n    ctx.strokeStyle = \"hsla(\" + Math.round(f.update()) + \",100%,50%,0.025)\";\n    // @ts-ignore\n    ctx.lineWidth = 10;\n    for (var e, t = 0; t < E.trails; t++) {\n      // @ts-ignore\n      (e = lines[t]).update();\n      e.draw();\n    }\n    // @ts-ignore\n    ctx.frame++;\n    window.requestAnimationFrame(render);\n  }\n}\n\nfunction resizeCanvas() {\n  // @ts-ignore\n  ctx.canvas.width = window.innerWidth - 20;\n  // @ts-ignore\n  ctx.canvas.height = window.innerHeight;\n}\n\n// @ts-ignore\nvar ctx,\n  // @ts-ignore\n  f,\n  e = 0,\n  pos = {},\n  // @ts-ignore\n  lines = [],\n  E = {\n    debug: true,\n    friction: 0.5,\n    trails: 80,\n    size: 50,\n    dampening: 0.025,\n    tension: 0.99,\n  };\nfunction Node() {\n  this.x = 0;\n  this.y = 0;\n  this.vy = 0;\n  this.vx = 0;\n}\n\nexport const renderCanvas = function () {\n  // @ts-ignore\n  ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n  ctx.running = true;\n  ctx.frame = 1;\n  f = new n({\n    phase: Math.random() * 2 * Math.PI,\n    amplitude: 85,\n    frequency: 0.0015,\n    offset: 285,\n  });\n  document.addEventListener(\"mousemove\", onMousemove);\n  document.addEventListener(\"touchstart\", onMousemove);\n  document.body.addEventListener(\"orientationchange\", resizeCanvas);\n  window.addEventListener(\"resize\", resizeCanvas);\n  window.addEventListener(\"focus\", () => {\n    // @ts-ignore\n    if (!ctx.running) {\n      // @ts-ignore\n      ctx.running = true;\n      render();\n    }\n  });\n  window.addEventListener(\"blur\", () => {\n    // @ts-ignore\n    ctx.running = true;\n  });\n  resizeCanvas();\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}