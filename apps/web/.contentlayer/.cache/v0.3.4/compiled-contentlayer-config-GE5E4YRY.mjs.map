{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehype-component.ts", "../../../src/registry/index.tsx", "../../../src/lib/registry/styles.ts", "../../../src/lib/rehype-npm-command.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport { visit } from \"unist-util-visit\";\n\nimport { rehypeComponent } from \"./src/lib/rehype-component\";\nimport { rehypeNpmCommand } from \"./src/lib/rehype-npm-command\";\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\n\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  readingTime: {\n    type: \"number\",\n    resolve: (doc) => {\n      const content = String(doc.body.raw);\n      const wordsPerMinute = 200;\n      const numberOfWords = content.split(/\\s/g).length;\n      const minutes = numberOfWords / wordsPerMinute;\n      return Math.ceil(minutes);\n    },\n  },\n};\n\nconst BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: \"blog/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the blog post\",\n      required: true,\n    },\n    date: {\n      type: \"string\",\n      description: \"The date of the blog post\",\n      required: true,\n    },\n    modifiedTime: {\n      type: \"string\",\n      description: \"The modified time of the blog post\",\n      required: true,\n    },\n    summary: {\n      type: \"string\",\n      description: \"The summary of the blog post\",\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport const Designs = defineDocumentType(() => ({\n  name: \"Designs\",\n  filePathPattern: `designs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    component: {\n      type: \"boolean\",\n      default: false,\n      required: false,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n  },\n  computedFields,\n}));\n\nexport const Guide = defineDocumentType(() => ({\n  name: \"Guide\",\n  filePathPattern: `guides/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n    },\n  },\n  computedFields,\n}));\n\nexport const Documentation = defineDocumentType(() => ({\n  name: \"Documentation\",\n  filePathPattern: `documentation/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n    },\n  },\n  computedFields,\n}));\n\nexport const Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: `pages/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"./src/content\",\n  documentTypes: [Page, Designs, Documentation, Guide, BlogPost],\n  mdx: {\n    // remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeComponent,\n      rehypeSlug,\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children;\n            if (codeEl.tagName !== \"code\") {\n              return;\n            }\n\n            if (codeEl.data?.meta) {\n              // Extract event from meta and pass it down the tree.\n              const regex = /event=\"([^\"]*)\"/;\n              const match = codeEl.data?.meta.match(regex);\n              if (match) {\n                node.__event__ = match ? match[1] : null;\n                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\");\n              }\n            }\n\n            node.__rawString__ = codeEl.children?.[0].value;\n            node.__src__ = node.properties?.__src__;\n            node.__style__ = node.properties?.__style__;\n          }\n        });\n      },\n      [\n        // @ts-ignore\n        rehypePrettyCode,\n        {\n          theme: { dark: \"one-dark-pro\", light: \"github-light\" },\n\n          /**\n           * @param {{ children: string | any[]; }} node\n           */\n          onVisitLine(node) {\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          /**\n           * @param {{ properties: { className: string[]; }; }} node\n           */\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\");\n          },\n          /**\n           * @param {{ properties: { className: string[]; }; }} node\n           */\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"];\n          },\n        },\n      ],\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n              return;\n            }\n\n            const preElement = node.children.at(-1);\n            if (preElement.tagName !== \"pre\") {\n              return;\n            }\n\n            preElement.properties[\"__withMeta__\"] =\n              node.children.at(0).tagName === \"div\";\n            preElement.properties[\"__rawString__\"] = node.__rawString__;\n\n            if (node.__src__) {\n              preElement.properties[\"__src__\"] = node.__src__;\n            }\n\n            if (node.__event__) {\n              preElement.properties[\"__event__\"] = node.__event__;\n            }\n\n            if (node.__style__) {\n              preElement.properties[\"__style__\"] = node.__style__;\n            }\n          }\n        });\n      },\n      rehypeNpmCommand,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n});\n", "import fs from \"fs\";\nimport path from \"path\";\nimport type { UnistNode, UnistTree } from \"@/types/unist\";\nimport { u } from \"unist-builder\";\nimport { visit } from \"unist-util-visit\";\n\nimport { Index } from \"../registry\";\nimport { styles } from \"./registry/styles\";\n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      // src prop overrides both name and fileName.\n      const { value: srcPath } =\n        (getNodeAttributeByName(node, \"src\") as {\n          name: string;\n          value?: string;\n          type?: string;\n        }) || {};\n\n      if (node.name === \"ComponentSource\") {\n        const name = getNodeAttributeByName(node, \"name\").value as string;\n        const fileName = getNodeAttributeByName(node, \"fileName\").value as\n          | string\n          | undefined;\n\n        if (!name && !srcPath) {\n          return null;\n        }\n\n        try {\n          for (const style of styles) {\n            let src: string;\n\n            if (srcPath) {\n              src = srcPath;\n            } else {\n              const component = Index[style.name][name];\n              src = fileName\n                ? component.files.find((file: string) => {\n                    return (\n                      file.endsWith(`${fileName}.tsx`) ||\n                      file.endsWith(`${fileName}.ts`)\n                    );\n                  }) || component.files[0]\n                : component.files[0];\n            }\n\n            // Read the source file.\n            const filePath = path.join(process.cwd(), src);\n            let source = fs.readFileSync(filePath, \"utf8\");\n\n            // Replace imports.\n            // TODO: Use @swc/core and a visitor to replace this.\n            // For now a simple regex should do.\n            source = source.replaceAll(\n              `@/registry/${style.name}/`,\n              \"@/components/\",\n            );\n            source = source.replaceAll(\"export default\", \"export\");\n\n            // Add code as children so that rehype can take over at build time.\n            node.children.push(\n              u(\"element\", {\n                tagName: \"pre\",\n                properties: {\n                  __src__: src,\n                  __style__: style.name,\n                },\n                attributes: [\n                  {\n                    name: \"styleName\",\n                    type: \"mdxJsxAttribute\",\n                    value: style.name,\n                  },\n                ],\n                children: [\n                  u(\"element\", {\n                    tagName: \"code\",\n                    properties: {\n                      className: [\"language-tsx\"],\n                    },\n                    children: [\n                      {\n                        type: \"text\",\n                        value: source,\n                      },\n                    ],\n                  }),\n                ],\n              }),\n            );\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      if (node.name === \"ComponentPreview\") {\n        const name = getNodeAttributeByName(node, \"name\").value as string;\n\n        if (!name) {\n          return null;\n        }\n\n        try {\n          for (const style of styles) {\n            const component = Index[style.name][name];\n            const src = component.files[0];\n\n            // Read the source file.\n            const filePath = path.join(process.cwd(), src);\n            let source = fs.readFileSync(filePath, \"utf8\");\n\n            // Replace imports.\n            // TODO: Use @swc/core and a visitor to replace this.\n            // For now a simple regex should do.\n            source = source.replaceAll(\n              `@/registry/${style.name}/`,\n              \"@/components/\",\n            );\n            source = source.replaceAll(\"export default\", \"export\");\n\n            // Add code as children so that rehype can take over at build time.\n            node.children.push(\n              u(\"element\", {\n                tagName: \"pre\",\n                properties: {\n                  __src__: src,\n                },\n                children: [\n                  u(\"element\", {\n                    tagName: \"code\",\n                    properties: {\n                      className: [\"language-tsx\"],\n                    },\n                    children: [\n                      {\n                        type: \"text\",\n                        value: source,\n                      },\n                    ],\n                  }),\n                ],\n              }),\n            );\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      // if (node.name === \"ComponentExample\") {\n      //   const source = getComponentSourceFileContent(node)\n      //   if (!source) {\n      //     return\n      //   }\n\n      //   // Replace the Example component with a pre element.\n      //   node.children?.push(\n      //     u(\"element\", {\n      //       tagName: \"pre\",\n      //       properties: {\n      //         __src__: src,\n      //       },\n      //       children: [\n      //         u(\"element\", {\n      //           tagName: \"code\",\n      //           properties: {\n      //             className: [\"language-tsx\"],\n      //           },\n      //           children: [\n      //             {\n      //               type: \"text\",\n      //               value: source,\n      //             },\n      //           ],\n      //         }),\n      //       ],\n      //     })\n      //   )\n\n      //   const extractClassname = getNodeAttributeByName(\n      //     node,\n      //     \"extractClassname\"\n      //   )\n      //   if (\n      //     extractClassname &&\n      //     typeof extractClassname.value !== \"undefined\" &&\n      //     extractClassname.value !== \"false\"\n      //   ) {\n      //     // Extract className from string\n      //     // TODO: Use @swc/core and a visitor to extract this.\n      //     // For now, a simple regex should do.\n      //     const values = source.match(/className=\"(.*)\"/)\n      //     const className = values ? values[1] : \"\"\n\n      //     // Add the className as a jsx prop so we can pass it to the copy button.\n      //     node.attributes?.push({\n      //       name: \"extractedClassNames\",\n      //       type: \"mdxJsxAttribute\",\n      //       value: className,\n      //     })\n\n      //     // Add a pre element with the className only.\n      //     node.children?.push(\n      //       u(\"element\", {\n      //         tagName: \"pre\",\n      //         properties: {},\n      //         children: [\n      //           u(\"element\", {\n      //             tagName: \"code\",\n      //             properties: {\n      //               className: [\"language-tsx\"],\n      //             },\n      //             children: [\n      //               {\n      //                 type: \"text\",\n      //                 value: className,\n      //               },\n      //             ],\n      //           }),\n      //         ],\n      //       })\n      //     )\n      //   }\n      // }\n\n      // if (node.name === \"ComponentSource\") {\n      //   const source = getComponentSourceFileContent(node)\n      //   if (!source) {\n      //     return\n      //   }\n\n      //   // Replace the Source component with a pre element.\n      //   node.children?.push(\n      //     u(\"element\", {\n      //       tagName: \"pre\",\n      //       properties: {\n      //         __src__: src,\n      //       },\n      //       children: [\n      //         u(\"element\", {\n      //           tagName: \"code\",\n      //           properties: {\n      //             className: [\"language-tsx\"],\n      //           },\n      //           children: [\n      //             {\n      //               type: \"text\",\n      //               value: source,\n      //             },\n      //           ],\n      //         }),\n      //       ],\n      //     })\n      //   )\n      // }\n    });\n  };\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes.find((attribute) => attribute.name === name);\n}\n\nfunction getComponentSourceFileContent(node: UnistNode) {\n  const src = getNodeAttributeByName(node, \"src\").value as string;\n\n  if (!src) {\n    return null;\n  }\n\n  // Read the source file.\n  const filePath = path.join(process.cwd(), src);\n  const source = fs.readFileSync(filePath, \"utf8\");\n\n  return source;\n}\n", "import * as React from \"react\";\n\nexport const Index: Record<string, any> = {\n  default: {\n    \"typography-blockquote\": {\n      name: \"typography-blockquote\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-blockquote\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-blockquote.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-demo\": {\n      name: \"typography-demo\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-demo\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-demo.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-h1\": {\n      name: \"typography-h1\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-h1\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-h1.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-h2\": {\n      name: \"typography-h2\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-h2\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-h2.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-h3\": {\n      name: \"typography-h3\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-h3\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-h3.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-h4\": {\n      name: \"typography-h4\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-h4\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-h4.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-inline-code\": {\n      name: \"typography-inline-code\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-inline-code\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-inline-code.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-large\": {\n      name: \"typography-large\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-large\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-large.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-lead\": {\n      name: \"typography-lead\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-lead\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-lead.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-list\": {\n      name: \"typography-list\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-list\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-list.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-muted\": {\n      name: \"typography-muted\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-muted\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-muted.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-p\": {\n      name: \"typography-p\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-p\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-p.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-small\": {\n      name: \"typography-small\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-small\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-small.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n    \"typography-table\": {\n      name: \"typography-table\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/example/typography-table\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/example/typography-table.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n\n    // According\n\n    \"accordion-01\": {\n      name: \"accordion-01\",\n      type: \"\",\n      component: React.lazy(\n        () => import(\"@/registry/default/designali/accordion/accordion-01\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/designali/accordion/accordion-01.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n\n    // Inputs\n    \"input-01\": {\n      name: \"input-01\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/designali/inputs/input-01\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/designali/inputs/input-01.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n\n    // Mockup\n    \"iphone-16-pro\": {\n      name: \"iphone-16-pro\",\n      type: \"components:example\",\n      component: React.lazy(\n        () => import(\"@/registry/default/designali/mockup/iphone-16-pro\"),\n      ),\n      source: \"\",\n      files: [\"src/registry/default/designali/mockup/iphone-16-pro.tsx\"],\n      category: \"undefined\",\n      subcategory: \"undefined\",\n      chunks: [],\n    },\n  },\n};\n", "export const styles = [\n  {\n    name: \"default\",\n    label: \"Designali\",\n  },\n] as const;\n\nexport type Style = (typeof styles)[number];\n", "import { UnistNode, UnistTree } from \"@/types/unist\";\nimport { visit } from \"unist-util-visit\";\n\nexport function rehypeNpmCommand() {\n  return (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      if (node.type !== \"element\" || node?.tagName !== \"pre\") {\n        return;\n      }\n\n      // npm install.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm install\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"yarn add\",\n        );\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"pnpm add\",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"bun add\",\n        );\n      }\n\n      // npx create.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"yarn create \",\n        );\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"pnpm create \",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\",\n        );\n      }\n\n      // npx.\n      if (\n        node.properties?.[\"__rawString__\"]?.startsWith(\"npx\") &&\n        !node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")\n      ) {\n        const npmCommand = node.properties?.[\"__rawString__\"];\n        node.properties[\"__npmCommand__\"] = npmCommand;\n        node.properties[\"__yarnCommand__\"] = npmCommand;\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"pnpm dlx\",\n        );\n        node.properties[\"__bunCommand__\"] = npmCommand.replace(\n          \"npx\",\n          \"bunx --bun\",\n        );\n      }\n    });\n  };\n}\n"],
  "mappings": "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",
  "names": ["visit", "visit", "visit"]
}
