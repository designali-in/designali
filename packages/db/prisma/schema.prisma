generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  likes        Int      @default(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  bio           String?
  image         String?
  coverImage    String?
  website       String?
  twitter       String?
  instagram     String?
  linkedin      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          UserRole  @default(USER)

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
 
  teamActivities     TeamActivity[]
  teams              TeamMember[]
  accounts           Account[]
  sessions           Session[]
  urls               Url[]
  Asset              Asset[]
  likes              AssetLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Url {
  id          String   @id @default(cuid())
  originalUrl String
  shortUrl    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())

  @@unique([userId, originalUrl])
  @@map("urls")
}
 

model Team {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  invitations Invitation[]
  activities  TeamActivity[]
  members     TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model TeamActivity {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  event     String
  metadata  Json
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([userId])
}
  
 
enum UserRole {
  ADMIN
  USER
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}
 
  
model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("newsletter_subscribers")
}

model Asset {
  id           String      @id @default(cuid())
  title        String
  description  String?
  url          String
  downloadlink String
  downloads    Int         @default(0)
  views        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  likes        AssetLike[]
  tags         Tag[]
}

model AssetLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  assetId   String
  user      User     @relation(fields: [userId], references: [id])
  asset     Asset    @relation(fields: [assetId], references: [id])

  @@unique([userId, assetId])
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  assets Asset[]
}
