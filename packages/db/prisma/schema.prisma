generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes        Int      @default(0)

  @@index([userId])
  @@map(name: "sessions")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  apiKey        String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  role          UserRole  @default(USER)

  accounts      Account[]
  sessions      Session[]
  UserUrl       UserUrl[] 
  teams             TeamMember[]
  teamActivities    TeamActivity[]

  agency              Agency[]
  rating             Rating[]
  finishedWatching   FinishedDesign[]
  currentlyWatching  CurrentlyDesign[]
  notStartedWatching NotStartedDesign[]

  community Community[]
  post      DesignPost[]
  comment   Comment[]

  reviews     Reviews[]
  reviewLikes ReviewLike[]

  like Like[]

  pollVote PollVote[]
  poll     Poll[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  slug      String   @unique
  likes     Int      @default(0)
  views     Int      @default(0) 
}
 
model UserUrl {
  id         String   @id @default(cuid())
  userId     String
  userName   String
  target     String
  url        String   @unique
  visible    Int      @default(0)
  active     Int      @default(1)
  expiration String   @default("-1")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  UrlMeta UrlMeta[]

  @@index([userId])
  @@map(name: "user_urls")
}

model UrlMeta {
  id    String @id @default(cuid())
  urlId String
  click Int

  ip        String  @default("127.0.0.1")
  city      String?
  country   String?
  region    String?
  latitude  String?
  longitude String?
  referer   String?
  lang      String?
  device    String?
  browser   String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  userUrl UserUrl @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@unique([urlId, ip])
  @@index([urlId])
  @@map(name: "url_metas")
}


model Team {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  invitations Invitation[]
  activities TeamActivity[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
}

model TeamActivity {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  event     String   // e.g., "member_added", "member_removed", "role_updated"
  metadata  Json     // Additional event data
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([userId])
}

model Agency {
  id    String @id @default(cuid())
  name  String @unique

  catalog String
  
  filetype String
  software String

  releaseYear String
  designer    String

  description String @db.VarChar(1500)

  tutorialLink String
  coverImage  String

  rating       Rating[]
  totalRatings Int      @default(0)

  finishedDesign   FinishedDesign[]
  currentlyDesign  CurrentlyDesign[]
  notStartedDesign NotStartedDesign[]

  reviews Reviews[]

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([name])
  @@index([creatorId])
}

model Reviews {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  agencyId String
  agency   Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  reviewLikes ReviewLike[]

  title String @db.VarChar(50)
  text  String @db.VarChar(1500)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([agencyId])
}

model ReviewLike {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reviewId String
  review   Reviews @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
}

model Rating {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  agencyId String
  agency   Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  rating Int

  @@index([userId])
  @@index([agencyId])
}

//----------------------------------------
model FinishedDesign {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  agencyId String
  agency   Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([agencyId])
}

model CurrentlyDesign {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  agencyId String
  agency   Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([agencyId])
}

model NotStartedDesign {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  agencyId String
  agency   Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([agencyId])
}


model Community {
  id          String @id @default(cuid())
  name        String @unique
  description String @db.VarChar(300)

  category String

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  post DesignPost[]

  createdAt DateTime @default(now())

  @@index([creatorId])
}

model DesignPost {
  id String @id @default(cuid())

  title   String @db.VarChar(80)
  message String @db.VarChar(600)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  like        Like[]

  comment Comment[]

  createdAt DateTime @default(now())

  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(300)
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   DesignPost   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   DesignPost   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

//----------------------------------------
model Poll {
  id String @id @default(cuid())

  question String @db.VarChar(150)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  option PollOption[]

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PollOption {
  id String @id @default(cuid())

  option String @db.VarChar(80)

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  vote PollVote[]

  createdAt DateTime @default(now())
}

model PollVote {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
